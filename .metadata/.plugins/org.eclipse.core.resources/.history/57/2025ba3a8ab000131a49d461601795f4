package esiea_bid;

import java.util.List;
import java.util.Observable;
import java.util.Observer;

public class CancelObserver implements Observer{
	 
	private BidState state;
	private List<Bid> listBid;
	private List<Offer> listOffer;
	public CancelObserver(BidState state, List<Bid> listBid, List<Offer> listOffer)
	{
		this.state = state;
		this.listBid = listBid;
		this.listOffer = listOffer;
	}
	
	@Override
	public void update(Observable bid, Object arg1) {
		System.out.println("Observeur activé");
		List<Alarm> listAlarm;
		if(arg1.equals(BidState.CANCELED))
		{
			for (Offer offer : listOffer)
			{
				listAlarm = offer.getBuyer().getListAlarm();
				for (Alarm alarm : listAlarm)
				{
					if(alarm.getAlarmType().equals(AlarmType.BID_CANCELED) && alarm.getAlarmState().equals(AlarmState.ENABLE))
					{
						System.out.println("Alarm : Bid has been canceled");
					}
				}
			}
		}
		
		for (Bid bid1 : listBid)
		{
			System.out.println("parcours bid");
			if(bid1 == bid)
			{
				System.out.println("bid egale");
				if(bid1.getPrice() > bid1.getReservePrice())
					System.out.println("Alarm : Reserver price reache");
			}
		}
	}
}
