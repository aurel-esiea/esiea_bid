package esiea_bid;

import java.util.HashSet;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;

import user.SystemUser;

public class AlarmObserver implements Observer{
	 
	private BidState state;
	private List<Bid> listBid;
	private List<Offer> listOffer;
	private HashSet<Alarm> listAlarm;

	public AlarmObserver(BidState state, List<Bid> listBid, List<Offer> listOffer, HashSet<Alarm> listAlarm)
	{
		this.state = state;
		this.listBid = listBid;
		this.listOffer = listOffer;
		this.listAlarm = listAlarm;
	}
	
	@Override
	public void update(Observable obs, Object arg1) {
		for (Offer offer : listOffer)
		{
			if(offer == obs)
			{
				//if(arg1.equals(BidState.CANCELED))
				//	System.out.println("Alarm : Bid has been canceled");
					
				if(offer.getPrice() >= offer.getBid().getReservePrice() && !offer.getBid().isReservePriceReached())
				{
					offer.getBid().setReservePriceReached(true);
					for (Alarm alarm : listAlarm)
					{
						if(alarm.getAlarmType().equals(AlarmType.RESERVE_PRICE_REACHED) && alarm.getBid().equals(offer.getBid()))
							System.out.println("Alarm for " + alarm.getUser().getFirstName() + ": reserve Price on product " + offer.getBid().getProduct().getDescription() + " has been reached");
					}
				}	
				
				if(offer.getPrice() > offer.getBid().getPrice())
				{
					for (Alarm alarm : listAlarm)
					{
						if(alarm.getAlarmType().equals(AlarmType.RESERVE_PRICE_REACHED) && alarm.getBid().equals(offer.getBid()))
							System.out.println("Alarm for " + alarm.getUser().getFirstName() + ": user do better offer on product " + offer.getBid().getProduct().getDescription());
					}
				}
				
				System.out.println("Alarm to seller : User do an offer on your bid");*/
			}
		}	
	}
}
