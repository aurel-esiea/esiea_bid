package test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;

import objects.Bid;
import objects.BidState;
import objects.Offer;
import objects.Product;

import org.junit.Before;
import org.junit.Test;

import alarm_time.Alarm;
import alarm_time.AlarmObserver;
import alarm_time.TimeManager;
import alarm_time.TimeObserver;
import user.SystemUser;

public class TestSellerAction {

	private SystemUser user, user2;
	private static List<Offer> listOffer;
	private static List<Bid> listBid;
	private static HashSet<Alarm> listAlarm;
	private Bid bid;
	private Product product1;
	private AlarmObserver alarmObserver;
	private TimeManager timeManager;
	private TimeObserver timeObserver;
	private GregorianCalendar calendar;
	private Date date1;
	
	@Before
	public void setUp() throws Exception {
		listBid = new ArrayList<Bid>();
		listOffer = new ArrayList<Offer>();
		listAlarm = new HashSet<Alarm>();
		alarmObserver = new AlarmObserver(listAlarm);
		timeObserver = new TimeObserver(listBid, listOffer);
		timeManager = new TimeManager(new Date(), timeObserver);
		product1 = new Product("Blue Car");
		calendar = new GregorianCalendar(2014, Calendar.APRIL, 15);
		date1 = calendar.getTime();
		user = new SystemUser("user", "Dupont", "Thomas", "password");
		user2 = new SystemUser("user2", "Durant", "Paul", "password");
		bid = new Bid(product1, date1, 1000, 2000, user, alarmObserver);
	}

	@Test
	public void testSucessBidCreation() {
		user.createBid(product1, listBid, 1000.00, 3000.00, date1, alarmObserver, timeManager);
		assertFalse(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationNegativePrice() {
		user.createBid(product1, listBid, -1000.00, 3000.00, date1, alarmObserver, timeManager);
		assertTrue(listBid.isEmpty());
	}

	@Test
	public void testBidCreationBadReservePrice() {
		user.createBid(product1, listBid, 2000.00, 1000.00, date1, alarmObserver, timeManager);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationNegativeReservePrice() {
		user.createBid(product1, listBid, 2000.00, -1000.00, date1, alarmObserver, timeManager);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidEndDate() {
		user.createBid(product1, listBid, 1000.00, 3000.00, date1, alarmObserver, timeManager);
		user2.doOffer(bid, listOffer, 3100, alarmObserver);
		calendar = new GregorianCalendar(2014, Calendar.APRIL, 16);
		timeManager.setSystemTime(calendar.getTime());
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationBadDate() {
		calendar = new GregorianCalendar(2014, Calendar.APRIL, 16);
		timeManager.setSystemTime(calendar.getTime());
		user.createBid(product1, listBid, 1000.00, 3000.00, date1, alarmObserver, timeManager);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidPublish() {
		user.publishBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}
	
	@Test
	public void testBidCancelBadUser() {
		user.publishBid(bid);
		user2.doOffer(bid, listOffer, 1500.00, alarmObserver);
		user2.cancelBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}
	
	@Test
	public void testBidCancelReservePriceNotReached() {
		user.publishBid(bid);
		user2.doOffer(bid, listOffer, 1500.00, alarmObserver);
		user.cancelBid(bid);
		assertEquals(BidState.CANCELED, bid.getBidState());
	}
		
	@Test
	public void testBidCancelReservePriceReached() {
		user.publishBid(bid);
		user2.doOffer(bid, listOffer, 2500.00, alarmObserver);
		user.cancelBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}	

	@Test
	public void testDisplaySellerBidSuccess() {
		user.publishBid(bid);
		listBid.add(bid);
		List<Bid> sellerBid = user.displaySellerBid(listBid);
		assertFalse(sellerBid.isEmpty());
	}

	@Test
	public void testDisplaySellerBidEmptyList() {
		List<Bid> sellerBid = user.displaySellerBid(listBid);
		assertTrue(sellerBid.isEmpty());
	}

	@Test
	public void testDisplaySellerBidBadUser() {
		user.publishBid(bid);
		listBid.add(bid);
		List<Bid> sellerBid = user2.displaySellerBid(listBid);
		assertTrue(sellerBid.isEmpty());
	}

	@Test
	public void testShowBuyerOfferSuccess() {
		user.publishBid(bid);
		user2.doOffer(bid, listOffer, 3000, alarmObserver);
		listBid.add(bid);
		List<Offer> buyerOffer = user.showBuyerOffer(listOffer);
		assertFalse(buyerOffer.isEmpty());
	}

	@Test
	public void testShowBuyerOfferBadUser() {
		user.publishBid(bid);
		listBid.add(bid);
		user2.doOffer(bid, listOffer, 3000, alarmObserver);
		List<Offer> buyerOffer = user2.showBuyerOffer(listOffer);
		assertTrue(buyerOffer.isEmpty());
	}

	@Test
	public void testShowBuyerOfferEmptyList() {
		List<Offer> buyerOffer = user.showBuyerOffer(listOffer);
		assertTrue(buyerOffer.isEmpty());
	}
}
