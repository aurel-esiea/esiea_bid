package alarm_time;

import java.util.List;
import java.util.Observable;
import java.util.Observer;

import objects.Bid;
import objects.Offer;

public class TimeObserver implements Observer {

	private List<Bid> listBid;
	private List<Offer> listOffer;
	
	public TimeObserver(List<Bid> listBid, List<Offer> listOffer){
		this.listBid = listBid;
		this.listOffer = listOffer;
	}
	@Override
	public void update(Observable obs, Object arg) {
		if(obs instanceof TimeManager)
		{
			TimeManager timeManager = (TimeManager)obs;
			System.out.println("1");
			for (Bid bid : listBid)
			{
				System.out.println("2");
				if(timeManager.getSystemTime().after(bid.getEndDate()))
				{
					System.out.println("3");
					for (Offer offer : listOffer)
					{
						System.out.println("4");
						if(offer.getBid().equals(bid) && offer.getPrice() == bid.getPrice())
						{
							System.out.println("Bid is terminated, Final price :" + bid.getBidState() + "Buyer :" + offer.getBuyer().getFirstName());
						}
					}
				}
			}
		}
	}
}
