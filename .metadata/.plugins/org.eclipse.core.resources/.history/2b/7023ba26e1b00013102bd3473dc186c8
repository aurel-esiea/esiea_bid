package test;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import alarm.Alarm;
import user.SystemUser;
import esiea_bid.Bid;
import esiea_bid.BidState;
import esiea_bid.AlarmObserver;
import esiea_bid.Offer;
import esiea_bid.Product;

public class TestSellerAction {

	private SystemUser user, user2;
	private static List<Offer> listOffer;
	private static List<Bid> listBid;
	private Bid bid;
	private Product product1;
	private AlarmObserver alarmObserver;
	private static HashSet<Alarm> listAlarm;

	@Before
	public void setUp() throws Exception {
		listOffer = new ArrayList<Offer>();
		listBid = new ArrayList<Bid>();
		listAlarm = new HashSet<Alarm>();
		alarmObserver = new AlarmObserver(BidState.CANCELED, listBid, listOffer, listAlarm);
		product1 = new Product("Blue Car");
		user = new SystemUser("Dupont", "Thomas", "password");
		user2 = new SystemUser("Durant", "Paul", "password");
		bid = new Bid(product1, new Date(), 1000, 2000, user, alarmObserver);
	}

	@Test
	public void testSucessBidCreation() {
		user.createBid(product1, listBid, 1000.00, 3000.00, new Date(), alarmObserver);
		assertFalse(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationNegativePrice() {
		user.createBid(product1, listBid, -1000.00, 3000.00, new Date(), alarmObserver);
		assertTrue(listBid.isEmpty());
	}

	@Test
	public void testBidCreationBadReservePrice() {
		user.createBid(product1, listBid, 2000.00, 1000.00, new Date(), alarmObserver);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationNegativeReservePrice() {
		user.createBid(product1, listBid, 2000.00, -1000.00, new Date(), alarmObserver);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidCreationBadDate() {
		user.createBid(product1, listBid, 1000.00, 3000.00, new Date(), alarmObserver);
		assertTrue(listBid.isEmpty());
	}
	
	@Test
	public void testBidPublish() {
		user.publishBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}
	
	@Test
	public void testBidCancelBadUser() {
		bid.setBidState(BidState.PUBLISHED);
		user2.doOffer(bid, listOffer, 1500.00, alarmObserver);
		user2.cancelBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}
	
	@Test
	public void testBidCancelReservePriceNotReached() {
		bid.setBidState(BidState.PUBLISHED);
		user2.doOffer(bid, listOffer, 1500.00, alarmObserver);
		user.cancelBid(bid);
		assertEquals(BidState.CANCELED, bid.getBidState());
	}
		
	@Test
	public void testBidCancelReservePriceReached() {
		bid.setBidState(BidState.PUBLISHED);
		user2.doOffer(bid, listOffer, 2500.00, alarmObserver);
		user.cancelBid(bid);
		assertEquals(BidState.PUBLISHED, bid.getBidState());
	}	
}
